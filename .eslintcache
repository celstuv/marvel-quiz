[{"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js":"1"},{"size":6653,"mtime":1608546435759,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1htu20f","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js",["7","8"],"import React, { Component, Fragment } from 'react'\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {QuizMarvel} from '../quizMarvel/';\r\nimport Levels from '../Levels';\r\nimport ProgressBar from '../ProgressBar';\r\nimport QuizOver from '../QuizOver';\r\n\r\ntoast.configure();\r\n\r\nclass Quiz extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.initialState = {\r\n      levelNames: ['debutant', 'confirme', 'expert'],\r\n      quizLevel: 0,\r\n      maxQuestions: 10,\r\n      storedQuestions: [],\r\n      question: null,\r\n      options: [],\r\n      idQuestion: 0,\r\n      btnDisabled: true,\r\n      userAnswer: null,\r\n      score: 0,\r\n      showWelcomeMsg: false,\r\n      quizEnd: false\r\n    }\r\n\r\n    this.state = this.initialState;\r\n    this.storedDataRef = React.createRef();\r\n  }\r\n\r\n  loadQuestions = quizz => {\r\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\r\n    /* console.log(fetchedArrayQuiz); */\r\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\r\n      this.storedDataRef.current = fetchedArrayQuiz;\r\n\r\n      /*Ne pas faire afficher la r√©ponse (dans le cas de user\r\n      d√©v ayantl'extension react chrome, mozilla, etc)*/\r\n      const newArray = fetchedArrayQuiz.map(({\r\n        answer,\r\n        ...keepRest\r\n      }) => keepRest);\r\n      this.setState({ storedQuestions: newArray })\r\n    } else {\r\n      alert('Pas assez de questions');\r\n    }\r\n  }\r\n\r\n  //Configurer pop-up pour accueillir le joueur\r\n  showToastMsg = pseudo => {\r\n    if (!this.state.showWelcomeMsg) {\r\n      this.setState({ showWelcomeMsg: true })\r\n\r\n      toast.warn(`ü¶Ñ Bonjour ${pseudo}, et bienvenue sur notre Quiz ! Et bonne Chance !`, {\r\n        position: 'top-center',\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color-welcome\"\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  /*M√©thode de cycle de vie\r\n  il s'ex√©cute puis lance loadQuestions*/\r\n  componentDidMount() {\r\n    this.loadQuestions(this.state.levelNames[this.state.quizLevel])\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    /*Verifier si l'on se trouve dans la derni√®re question du niveau*/\r\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\r\n      /*Si c'est le cas, on bascule sur composant gameOver*/\r\n      /*this.gameOver();*/\r\n      this.setState({ quizEnd: true })\r\n      /*sinon on basculte sur la question suivante*/\r\n    } else {\r\n      this.setState(prevState => ({\r\n        idQuestion: prevState.idQuestion + 1\r\n      }))\r\n    }\r\n\r\n    //V√©rifer la r√©ponse et incr√©menter le score\r\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\r\n    if (this.state.userAnswer === goodAnswer) {\r\n      this.setState(prevState => ({ score: prevState.score + 1 }))\r\n      toast.success('ü¶Ñ Bravo + 1!', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n    } else {\r\n      toast.error('ü¶Ñ Rat√© 0 !', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n            }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n      if ((this.state.storedQuestions !== prevState.storedQuestions) && this.state.storedQuestions.length) {\r\n        this.setState({\r\n          question: this.state.storedQuestions[this.state.idQuestion].question,\r\n          options: this.state.storedQuestions[this.state.idQuestion].options\r\n            })\r\n      }\r\n      if ((this.state.idQuestion !== prevState.idQuestion) && this.state.storedQuestions.length) {\r\n        this.setState({\r\n          question: this.state.storedQuestions[this.state.idQuestion].question,\r\n          options: this.state.storedQuestions[this.state.idQuestion].options,\r\n          userAnswer: null,\r\n          btnDisabled: true\r\n            })\r\n      }\r\n      if (this.state.quizEnd !== prevState.quizEnd) {\r\n        const gradePercent = this.getPercentage(this.state.maxQuestions, this.state.score);\r\n        this.gameOver(gradePercent);\r\n      }\r\n\r\n      if (this.props.userData.pseudo != prevProps.userData.pseudo) {\r\n        this.showToastMsg(this.props.userData.pseudo)\r\n      }\r\n\r\n  }\r\n\r\n  submitAnswer = selectedAnswer => {\r\n      this.setState({\r\n          userAnswer: selectedAnswer,\r\n          btnDisabled: false\r\n        })\r\n  }\r\n\r\n  getPercentage = (maxQuest, ourScore) => (ourScore / maxQuest) * 100;\r\n\r\n  gameOver = percent => {\r\n\r\n    if(percent >= 50) {\r\n      this.setState({\r\n        quizLevel: this.state.quizLevel + 1,\r\n        percent\r\n      })\r\n    } else {\r\n      this.setState({ percent })\r\n    }\r\n  }\r\n\r\nloadLevelQuestions = (param) => {\r\n  this.setState({...this.initialState, quizLevel: param})\r\n  this.loadQuestions(this.state.levelNames[param]);\r\n}\r\n\r\n\r\n  /* qd le render s'√©x√©cute, componentDidMount s'ex√©cute */\r\n  render() {\r\n    const {pseudo} = this.props.userData;\r\n    const displayOptions = this.state.options.map((option, index) => {\r\n      return (\r\n        <p key={index}\r\n          className={`answerOptions ${this.state.userAnswer === option ? 'selected' : null}`}\r\n          onClick={() => this.submitAnswer(option)}>\r\n        {option}\r\n      </p>\r\n      )\r\n    })\r\n\r\n    /*Si le QuizEnd (niveau) est termin√©, j'affiche le message se trouvant dans le component QuizOver*/\r\n    return this.state.quizEnd ? (\r\n      <QuizOver\r\n        ref={this.storedDataRef}\r\n        levelNames={this.state.levelNames}\r\n        score={this.state.score}\r\n        maxQuestions={this.state.maxQuestions}\r\n        quizLevel={this.state.quizLevel}\r\n        percent={this.state.percent}\r\n        loadLevelQuestions={this.loadLevelQuestions}\r\n        />\r\n      )\r\n      :\r\n      (\r\n      <Fragment>\r\n        <h2>Bonjour : {pseudo}, et bienvenue sur notre Quiz !</h2>\r\n        <Levels/>\r\n        <ProgressBar\r\n          idQuestion={this.state.idQuestion}\r\n          maxQuestions={this.state.maxQuestions} />\r\n        <h3>{this.state.question}</h3>\r\n\r\n        {displayOptions}\r\n\r\n        <button\r\n          disabled={this.state.btnDisabled}\r\n          className=\"btnSubmit\"\r\n          onClick={this.nextQuestion}\r\n          type=\"button\">\r\n\r\n          {this.state.idQuestion < this.state.maxQuestions - 1 ? 'Suivant' : 'Terminer'}\r\n\r\n        </button>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n",{"ruleId":"9","severity":1,"message":"10","line":2,"column":9,"nodeType":"11","messageId":"12","endLine":2,"endColumn":23},{"ruleId":"13","severity":1,"message":"14","line":136,"column":38,"nodeType":"15","messageId":"16","endLine":136,"endColumn":40},"no-unused-vars","'ToastContainer' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]
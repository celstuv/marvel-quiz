[{"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js":"1","C:\\wamp64\\www\\marvel-quiz\\src\\components\\App\\index.js":"2","C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js":"3","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js":"4"},{"size":6673,"mtime":1608558210549,"results":"5","hashOfConfig":"6"},{"size":1163,"mtime":1608552848465,"results":"7","hashOfConfig":"6"},{"size":3357,"mtime":1608552845841,"results":"8","hashOfConfig":"6"},{"size":995,"mtime":1608551134486,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1htu20f",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js",["19","20"],"import React, { Component, Fragment } from 'react'\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {QuizMarvel} from '../quizMarvel/';\r\nimport Levels from '../Levels';\r\nimport ProgressBar from '../ProgressBar';\r\nimport QuizOver from '../QuizOver';\r\nimport { FaChevronRight } from 'react-icons/fa';\r\n\r\ntoast.configure();\r\n\r\nconst initialState = {\r\n  quizLevel: 0,\r\n  maxQuestions: 10,\r\n  storedQuestions: [],\r\n  question: null,\r\n  options: [],\r\n  idQuestion: 0,\r\n  btnDisabled: true,\r\n  userAnswer: null,\r\n  score: 0,\r\n  showWelcomeMsg: false,\r\n  quizEnd: false,\r\n  percent: null\r\n}\r\n\r\nconst levelNames = ['debutant', 'confirm√©', 'expert'];\r\n\r\nclass Quiz extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = initialState;\r\n    this.storedDataRef = React.createRef();\r\n  }\r\n\r\n  loadQuestions = quizz => {\r\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\r\n    /* console.log(fetchedArrayQuiz); */\r\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\r\n      this.storedDataRef.current = fetchedArrayQuiz;\r\n\r\n      /*Ne pas faire afficher la r√©ponse (dans le cas de user\r\n      d√©v ayantl'extension react chrome, mozilla, etc)*/\r\n      const newArray = fetchedArrayQuiz.map(({ answer, ...keepRest }) => keepRest);\r\n      this.setState({ storedQuestions: newArray })\r\n    }\r\n  }\r\n\r\n  //Configurer pop-up pour accueillir le joueur\r\n  showToastMsg = pseudo => {\r\n    if (!this.state.showWelcomeMsg) {\r\n      this.setState({ showWelcomeMsg: true })\r\n\r\n      toast.warn(`ü¶Ñ Bonjour ${pseudo}, et bienvenue sur notre Quiz ! Et bonne Chance !`, {\r\n        position: 'top-center',\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color-welcome\"\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  /*M√©thode de cycle de vie\r\n  il s'ex√©cute puis lance loadQuestions*/\r\n  componentDidMount() {\r\n    this.loadQuestions(levelNames[this.state.quizLevel])\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    /*Verifier si l'on se trouve dans la derni√®re question du niveau*/\r\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\r\n      /*Si c'est le cas, on bascule sur composant gameOver*/\r\n      /*this.gameOver();*/\r\n      this.setState({ quizEnd: true })\r\n      /*sinon on basculte sur la question suivante*/\r\n    } else {\r\n      this.setState(prevState => ({ idQuestion: prevState.idQuestion + 1 }))\r\n    }\r\n\r\n    //V√©rifer la r√©ponse et incr√©menter le score\r\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\r\n    if (this.state.userAnswer === goodAnswer) {\r\n      this.setState(prevState => ({ score: prevState.score + 1 }))\r\n      toast.success('ü¶Ñ Bravo + 1!', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n    } else {\r\n      toast.error('ü¶Ñ Rat√© 0 !', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n            }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    const {\r\n      maxQuestions,\r\n      storedQuestions,\r\n      idQuestion,\r\n      score,\r\n      quizEnd\r\n    } = this.state;\r\n\r\n      if ((storedQuestions !== prevState.storedQuestions) && storedQuestions.length) {\r\n        this.setState({\r\n          question: storedQuestions[idQuestion].question,\r\n          options: storedQuestions[idQuestion].options\r\n            })\r\n      }\r\n      if ((idQuestion !== prevState.idQuestion) && storedQuestions.length) {\r\n        this.setState({\r\n          question: storedQuestions[idQuestion].question,\r\n          options: storedQuestions[idQuestion].options,\r\n          userAnswer: null,\r\n          btnDisabled: true\r\n            })\r\n      }\r\n      if (quizEnd !== prevState.quizEnd) {\r\n        const gradePercent = this.getPercentage(maxQuestions, score);\r\n        this.gameOver(gradePercent);\r\n      }\r\n\r\n      if (this.props.userData.pseudo != prevProps.userData.pseudo) {\r\n        this.showToastMsg(this.props.userData.pseudo)\r\n      }\r\n\r\n  }\r\n\r\n  submitAnswer = selectedAnswer => {\r\n      this.setState({\r\n          userAnswer: selectedAnswer,\r\n          btnDisabled: false\r\n        })\r\n  }\r\n\r\n  getPercentage = (maxQuest, ourScore) => (ourScore / maxQuest) * 100;\r\n\r\n  gameOver = percent => {\r\n\r\n    if(percent >= 50) {\r\n      this.setState({\r\n        quizLevel: this.state.quizLevel + 1,\r\n        percent\r\n      })\r\n    } else {\r\n      this.setState({ percent })\r\n    }\r\n  }\r\n\r\nloadLevelQuestions = (param) => {\r\n  this.setState({...initialState, quizLevel: param})\r\n  this.loadQuestions(levelNames[param]);\r\n}\r\n\r\n\r\n  /* qd le render s'√©x√©cute, componentDidMount s'ex√©cute */\r\n  render() {\r\n    const {pseudo} = this.props.userData;\r\n\r\n    const {\r\n      quizLevel,\r\n      maxQuestions,\r\n      question,\r\n      options,\r\n      idQuestion,\r\n      btnDisabled,\r\n      userAnswer,\r\n      score,\r\n      quizEnd,\r\n      percent\r\n    } = this.state;\r\n\r\n\r\n    const displayOptions = options.map((option, index) => {\r\n      return (\r\n        <p key={index}\r\n          className={`answerOptions ${userAnswer === option ? 'selected' : null}`}\r\n          onClick={() => this.submitAnswer(option)}>\r\n          <FaChevronRight /> {option}\r\n      </p>\r\n      )\r\n    })\r\n\r\n    /*Si le QuizEnd (niveau) est termin√©, j'affiche le message se trouvant dans le component QuizOver*/\r\n    return quizEnd ? (\r\n      <QuizOver\r\n        ref={this.storedDataRef}\r\n        levelNames={levelNames}\r\n        score={score}\r\n        maxQuestions={maxQuestions}\r\n        quizLevel={quizLevel}\r\n        percent={percent}\r\n        loadLevelQuestions={this.loadLevelQuestions}\r\n        />\r\n      )\r\n      :\r\n      (\r\n      <Fragment>\r\n        <h2>Bonjour : {pseudo}, et bienvenue sur notre Quiz !</h2>\r\n        <Levels\r\n          levelNames={levelNames}\r\n          quizLevel={quizLevel}\r\n          />\r\n        <ProgressBar\r\n          idQuestion={idQuestion}\r\n          maxQuestions={maxQuestions} />\r\n        <h3>{question}</h3>\r\n\r\n        {displayOptions}\r\n\r\n        <button\r\n          disabled={btnDisabled}\r\n          className=\"btnSubmit\"\r\n          onClick={this.nextQuestion}\r\n          type=\"button\">\r\n\r\n          {idQuestion < maxQuestions - 1 ? 'Suivant' : 'Terminer'}\r\n\r\n        </button>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\App\\index.js",["21"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js",[],{"ruleId":"22","severity":1,"message":"23","line":2,"column":9,"nodeType":"24","messageId":"25","endLine":2,"endColumn":23},{"ruleId":"26","severity":1,"message":"27","line":140,"column":38,"nodeType":"28","messageId":"29","endLine":140,"endColumn":40},{"ruleId":"30","severity":1,"message":"31","line":22,"column":55,"nodeType":"32","endLine":23,"endColumn":11},"no-unused-vars","'ToastContainer' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal"]
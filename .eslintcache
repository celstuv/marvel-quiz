[{"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js":"1","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js":"2","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ProgressBar\\index.js":"3","C:\\wamp64\\www\\marvel-quiz\\src\\components\\quizMarvel\\index.js":"4","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js":"5","C:\\wamp64\\www\\marvel-quiz\\src\\index.js":"6","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js":"7","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js":"8","C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js":"9","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Welcome\\index.js":"10","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\context.js":"11","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\firebase.js":"12","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\index.js":"13","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ErrorPage\\index.js":"14","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Logout\\index.js":"15","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Login\\index.js":"16","C:\\wamp64\\www\\marvel-quiz\\src\\components\\App\\index.js":"17","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ForgetPassword\\index.js":"18","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Signup\\index.js":"19"},{"size":306,"mtime":1608228730545,"results":"20","hashOfConfig":"21"},{"size":6838,"mtime":1608460443264,"results":"22","hashOfConfig":"21"},{"size":956,"mtime":1608303855378,"results":"23","hashOfConfig":"21"},{"size":14032,"mtime":1608301040515,"results":"24","hashOfConfig":"21"},{"size":203,"mtime":1608461316204,"results":"25","hashOfConfig":"21"},{"size":790,"mtime":1608228730560,"results":"26","hashOfConfig":"21"},{"size":2483,"mtime":1608228668115,"results":"27","hashOfConfig":"21"},{"size":349,"mtime":1608117196889,"results":"28","hashOfConfig":"21"},{"size":3283,"mtime":1608461319306,"results":"29","hashOfConfig":"21"},{"size":1381,"mtime":1608228732915,"results":"30","hashOfConfig":"21"},{"size":141,"mtime":1608228730537,"results":"31","hashOfConfig":"21"},{"size":1104,"mtime":1608228730538,"results":"32","hashOfConfig":"21"},{"size":186,"mtime":1608228730540,"results":"33","hashOfConfig":"21"},{"size":530,"mtime":1608228730535,"results":"34","hashOfConfig":"21"},{"size":820,"mtime":1608230863352,"results":"35","hashOfConfig":"21"},{"size":2938,"mtime":1608228730548,"results":"36","hashOfConfig":"21"},{"size":1162,"mtime":1608448112031,"results":"37","hashOfConfig":"21"},{"size":2269,"mtime":1608228730542,"results":"38","hashOfConfig":"21"},{"size":3385,"mtime":1608228730555,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"1htu20f",{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js",["83"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"banner-container\">\r\n      <h1><Link to=\"/\">Marvel Quiz</Link></h1>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header;\r\n",["84","85"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js",["86","87","88"],"import { FaChevronRight } from 'react-icons/fa';\r\nimport Levels from '../Levels';\r\nimport ProgressBar from '../ProgressBar';\r\nimport { QuizMarvel } from '../quizMarvel/';\r\nimport QuizOver from '../QuizOver';\r\nimport React, { Component, Fragment } from 'react';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\ntoast.configure();\r\n\r\nconst initialState = {\r\n    quizLevel: 0,\r\n    maxQuestions: 10,\r\n    storedQuestions: [],\r\n    question: null,\r\n    options: [],\r\n    idQuestion: 0,\r\n    btnDisabled: true,\r\n    userAnswer: null,\r\n    score: 0,\r\n    showWelcomeMsg: false,\r\n    quizEnd: false,\r\n    percent: null\r\n}\r\n\r\nconst levelNames = ['debutant', 'confirmÃ©', 'expert'];\r\n\r\nclass Quiz extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.storedDataRef = React.createRef();\r\n  }\r\n\r\n  loadQuestions = quizz => {\r\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\r\n    /*console.log(fetchedArrayQuiz);*/\r\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\r\n      this.storedDataRef.current = fetchedArrayQuiz;\r\n\r\n      /*Ne pas faire afficher la rÃ©ponse (dans le cas de user\r\n      dÃ©v ayant l'extension react chrome, mozilla, etc)*/\r\n      const newArray = fetchedArrayQuiz.map(({ answer, ...keepRest }) => keepRest);\r\n      this.setState({ storedQuestions: newArray });\r\n    }\r\n  }\r\n\r\n  //Configurer pop-up pour accueillir le joueur\r\n  showToastMsg = pseudo => {\r\n    if (!this.state.showWelcomeMsg) {\r\n      this.setState({ showWelcomeMsg: true });\r\n\r\n      toast.warn(`ðŸ¦„ Bonjour ${pseudo}, et bienvenue sur notre Quiz ! Et bonne Chance !`, {\r\n        position: 'top-center',\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: 'toastify-color-welcome'\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  /*MÃ©thode de cycle de vie\r\n  il s'exÃ©cute puis lance loadQuestions*/\r\n  componentDidMount() {\r\n    this.loadQuestions(levelNames[this.state.quizLevel]);\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    /*Verifier si l'on se trouve dans la derniÃ¨re question du niveau*/\r\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\r\n      /*Si c'est le cas, on bascule sur composant gameOver*/\r\n      /*this.gameOver();*/\r\n      this.setState({ quizEnd: true })\r\n      /*sinon on basculte sur la question suivante*/\r\n    } else {\r\n      this.setState(prevState => ({ idQuestion: prevState.idQuestion + 1 }))\r\n    }\r\n\r\n    //VÃ©rifer la rÃ©ponse et incrÃ©menter le score\r\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\r\n    if (this.state.userAnswer === goodAnswer) {\r\n      this.setState(prevState => ({ score: prevState.score + 1 }))\r\n      toast.success('ðŸ¦„ Bravo + 1!', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n    } else {\r\n      toast.error('ðŸ¦„ RatÃ© 0 !', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n            }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const {\r\n        maxQuestions,\r\n        storedQuestions,\r\n        idQuestion,\r\n        quizEnd,\r\n        score\r\n        } = this.state;\r\n\r\n      if ((storedQuestions !== prevState.storedQuestions) && storedQuestions.length) {\r\n        this.setState({\r\n          question: storedQuestions[idQuestion].question,\r\n          options: storedQuestions[idQuestion].options\r\n            })\r\n      }\r\n      if ((idQuestion !== prevState.idQuestion) && storedQuestions.length) {\r\n        this.setState({\r\n          question: storedQuestions[idQuestion].question,\r\n          options: storedQuestions[idQuestion].options,\r\n          userAnswer: null,\r\n          btnDisabled: true\r\n            })\r\n      }\r\n      if (quizEnd !== prevState.quizEnd) {\r\n        /*console.log(this.state.score);*/\r\n        const gradePercent = this.getPercentage(maxQuestions, score);\r\n        this.gameOver(gradePercent);\r\n      }\r\n\r\n      if (this.props.userData.pseudo !== prevProps.userData.pseudo) {\r\n        this.showToastMsg(this.props.userData.pseudo)\r\n      }\r\n\r\n  }\r\n\r\n  submitAnswer = selectedAnswer => {\r\n      this.setState({\r\n          userAnswer: selectedAnswer,\r\n          btnDisabled: false\r\n        })\r\n  }\r\n\r\n  getPercentage = (maxQuest, ourScore) => (ourScore / maxQuest) * 100;\r\n\r\n  gameOver = percent => {\r\n\r\n    if(percent>= 50){\r\n      this.setState({\r\n        quizLevel: this.state.quizLevel + 1,\r\n        percent\r\n      })\r\n    } else {\r\n      this.setState({\r\n        percent\r\n      })\r\n    }\r\n  }\r\n\r\n  loadLevelQuestions = param => {\r\n        this.setState({...initialState, quizLevel: param})\r\n        this.loadQuestions(levelNames[param]);\r\n    }\r\n\r\n\r\n  /* qd le render s'Ã©xÃ©cute, componentDidMount s'exÃ©cute */\r\n  render() {\r\n\r\n    const {\r\n      quizLevel,\r\n      maxQuestions,\r\n      storedQuestions,\r\n      question,\r\n      options,\r\n      idQuestion,\r\n      btnDisabled,\r\n      userAnswer,\r\n      score,\r\n      showWelcomeMsg,\r\n      quizEnd,\r\n      percent\r\n    } = this.state;\r\n\r\n    const {pseudo} = this.props.userData;\r\n    const displayOptions = options.map((option, index) => {\r\n      return (\r\n        <p key={index}\r\n          className={`answerOptions ${userAnswer === option ? 'selected' : null}`}\r\n          onClick={() => this.submitAnswer(option)}>\r\n          <FaChevronRight /> {option}\r\n      </p>\r\n      )\r\n    })\r\n\r\n    /*Si le QuizEnd (niveau) est terminÃ©, j'affiche le message se trouvant dans le component QuizOver*/\r\n    return quizEnd ? (\r\n      <QuizOver\r\n        ref={this.storedDataRef}\r\n        levelNames={levelNames}\r\n        score={score}\r\n        maxQuestions={maxQuestions}\r\n        quizLevel={quizLevel}\r\n        percent={percent}\r\n        loadLevelQuestions={this.loadLevelQuestions}\r\n        />\r\n      )\r\n      :\r\n      (\r\n      <Fragment>\r\n        <h2>Bonjour : {pseudo}, et bienvenue sur notre Quiz !</h2>\r\n        <Levels\r\n          levelNames={levelNames}\r\n          quizLevel={quizLevel}\r\n          />\r\n        <ProgressBar\r\n          idQuestion={idQuestion}\r\n          maxQuestions={maxQuestions} />\r\n        <h3>{question}</h3>\r\n\r\n        {displayOptions}\r\n\r\n        <button\r\n          className=\"btnSubmit\"\r\n          onClick={this.nextQuestion}\r\n          type=\"button\"\r\n          disabled={btnDisabled} >\r\n\r\n          {idQuestion < maxQuestions - 1 ? 'Suivant' : 'Terminer'}\r\n\r\n        </button>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ProgressBar\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\quizMarvel\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js",["89"],"import React, { useRef, useEffect, useState, Fragment } from 'react';\r\n//useRef et useEffect useState, Fragment sont des hooks\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Landing = () => {\r\n\r\n  //CrÃ©ation d'une variable d'Ã©tat Ã  false\r\n  const [btn, setBtn] = useState(false);\r\n\r\n  const refWolverine = useRef(null);\r\n  //console.log(refWolverine); pour voir si j'ai une classList\r\n\r\n  //Ajout de function useEffect pour changer l'image au chargement de la page\r\n  //useEffect s'exÃ©cute 1 fois dans return au moment de l'affichage de la page\r\n  useEffect(() => {\r\n    //ajout de css pour obtenir l'image w-men.png\r\n    refWolverine.current.classList.add(\"startingImg\");\r\n    //retirer l'image au bout de 1s ainsi que les boutons inscriptions et connexions\r\n    setTimeout(() => {\r\n      refWolverine.current.classList.remove(\"startingImg\");\r\n      setBtn(true);\r\n    }, 1000);\r\n  }, [])\r\n\r\n\r\n  //Afficher les griffes qd on survol les boutons inscriptions et connexions\r\n  const setLeftImg = () => {\r\n    refWolverine.current.classList.add(\"leftImg\");\r\n    //refWolverine.current.classList.remove(\"rightImg\");\r\n  }\r\n\r\n  const setRightImg = () => {\r\n    refWolverine.current.classList.add(\"rightImg\");\r\n    //refWolverine.current.classList.remove(\"leftImg\");\r\n  }\r\n\r\n  // Autre methodes pour Effacer les griffes si on est sur l'un a=ou l'autre des boutons\r\n  const clearImg = () => {\r\n    if(refWolverine.current.classList.contains(\"leftImg\")) {\r\n      refWolverine.current.classList.remove(\"leftImg\")\r\n    } else if (refWolverine.current.classList.contains(\"rightImg\"))\r\n    refWolverine.current.classList.remove(\"rightImg\");\r\n  }\r\n\r\n\r\n  //condition de fonction si Btn est true alors affiche les boutons\r\n  const displayBtn = btn && (\r\n    //Fragment = div sans les caractÃ©ristiques de la div\r\n    //Link permet faire des liens. <link></Link> = <a href></a>\r\n    <Fragment>\r\n      <div className=\"leftBox\">\r\n        <Link onMouseOver={setLeftImg} onMouseOut={clearImg} className=\"btn-welcome\" to =\"/signup\">Inscription</Link>\r\n      </div>\r\n      <div className=\"rightBox\">\r\n        <Link onMouseOver={setRightImg} onMouseOut={clearImg} className=\"btn-welcome\" to =\"/login\">Connexion</Link>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n\r\n  return (\r\n    //au moment de l'affichage de la page , on a wolverine sans griffe\r\n    <main ref={refWolverine} className=\"welcomePage\">\r\n      { displayBtn }\r\n    </main>\r\n  )\r\n}\r\nexport default Landing;\r\n",["90","91"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Welcome\\index.js",["92"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\context.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\firebase.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\ErrorPage\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Logout\\index.js",["93"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Login\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\App\\index.js",["94"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\ForgetPassword\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Signup\\index.js",[],{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":16},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"95","severity":1,"message":"103","line":8,"column":10,"nodeType":"97","messageId":"98","endLine":8,"endColumn":24},{"ruleId":"95","severity":1,"message":"104","line":181,"column":7,"nodeType":"97","messageId":"98","endLine":181,"endColumn":22},{"ruleId":"95","severity":1,"message":"105","line":188,"column":7,"nodeType":"97","messageId":"98","endLine":188,"endColumn":21},{"ruleId":"95","severity":1,"message":"96","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":16},{"ruleId":"99","replacedBy":"106"},{"ruleId":"101","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":35,"column":6,"nodeType":"110","endLine":35,"endColumn":19,"suggestions":"111"},{"ruleId":"108","severity":1,"message":"112","line":16,"column":6,"nodeType":"110","endLine":16,"endColumn":15,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":22,"column":55,"nodeType":"116","endLine":23,"endColumn":11},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"'ToastContainer' is defined but never used.","'storedQuestions' is assigned a value but never used.","'showWelcomeMsg' is assigned a value but never used.",["117"],["118"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'firebase' and 'props.history'. Either include them or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has a missing dependency: 'firebase'. Either include it or remove the dependency array.",["120"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [firebase, props.history, userSession]",{"range":"125","text":"126"},"Update the dependencies array to be: [checked, firebase]",{"range":"127","text":"128"},[1004,1017],"[firebase, props.history, userSession]",[392,401],"[checked, firebase]"]
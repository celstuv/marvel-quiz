[{"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js":"1","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js":"2","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ProgressBar\\index.js":"3","C:\\wamp64\\www\\marvel-quiz\\src\\components\\quizMarvel\\index.js":"4","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js":"5","C:\\wamp64\\www\\marvel-quiz\\src\\index.js":"6","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js":"7","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js":"8","C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js":"9"},{"size":306,"mtime":1608228730545,"results":"10","hashOfConfig":"11"},{"size":5203,"mtime":1608300900990,"results":"12","hashOfConfig":"11"},{"size":465,"mtime":1608298172828,"results":"13","hashOfConfig":"11"},{"size":14032,"mtime":1608231124767,"results":"14","hashOfConfig":"11"},{"size":203,"mtime":1608230927304,"results":"15","hashOfConfig":"11"},{"size":790,"mtime":1608228730560,"results":"16","hashOfConfig":"11"},{"size":2483,"mtime":1608228668115,"results":"17","hashOfConfig":"11"},{"size":349,"mtime":1608117196889,"results":"18","hashOfConfig":"11"},{"size":160,"mtime":1608300492255,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1htu20f",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js",["41"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"banner-container\">\r\n      <h1><Link to=\"/\">Marvel Quiz</Link></h1>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header;\r\n",["42","43"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js",["44"],"import React, {Component, Fragment} from 'react';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {QuizMarvel} from '../quizMarvel/';\r\nimport Levels from '../Levels';\r\nimport ProgressBar from '../ProgressBar';\r\nimport QuizOver from '../QuizOver';\r\n\r\ntoast.configure();\r\n\r\nclass Quiz extends Component {\r\n\r\n  state = {\r\n    levelNames: [\r\n      'debutant', 'confirme', 'expert'\r\n    ],\r\n    quizLevel: 0,\r\n    maxQuestions: 10,\r\n    storedQuestions: [],\r\n    question: null,\r\n    options: [],\r\n    idQuestion: 0,\r\n    btnDisabled: true,\r\n    userAnswer: null,\r\n    score: 0,\r\n    showWelcomeMsg: false,\r\n    quizEnd: false\r\n  }\r\n\r\n  storedDataRef = React.createRef();\r\n\r\n  loadQuestions = quizz => {\r\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\r\n    /* console.log(fetchedArrayQuiz); */\r\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\r\n      this.storedDataRef.current = fetchedArrayQuiz;\r\n\r\n      /*Ne pas faire afficher la r√©ponse (dans le cas de user\r\n      d√©v ayantl'extension react chrome, mozilla, etc)*/\r\n      const newArray = fetchedArrayQuiz.map(({\r\n        answer,\r\n        ...keepRest\r\n      }) => keepRest);\r\n      this.setState({ storedQuestions: newArray })\r\n    } else {\r\n      alert('Pas assez de questions');\r\n    }\r\n  }\r\n\r\n  //Configurer pop-up pour accueillir le joueur\r\n  showWelcomeMsg = pseudo => {\r\n    if (!this.state.showWelcomeMsg) {\r\n      this.setState({ showWelcomeMsg: true })\r\n\r\n      toast.warn(`ü¶Ñ Bonjour ${pseudo}, et bienvenue sur notre Quiz ! Et bonne Chance !`, {\r\n        position: 'top-center',\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color-welcome\"\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  /*M√©thode de cycle de vie\n  il s'ex√©cute puis lance loadQuestions*/\r\n  componentDidMount() {\r\n    this.loadQuestions(this.state.levelNames[this.state.quizLevel])\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\r\n      this.gameOver();\r\n      /*console.log('GameOver');*/\r\n    } else {\r\n      this.setState(prevState => ({\r\n        idQuestion: prevState.idQuestion + 1\r\n      }))\r\n    }\r\n\r\n    //V√©rifer la r√©ponse et incr√©menter le score\r\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\r\n    if (this.state.userAnswer === goodAnswer) {\r\n      this.setState(prevState => ({ score: prevState.score + 1 }))\r\n      toast.success('ü¶Ñ Bravo + 1!', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: 1,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n    } else {\r\n      toast.error('ü¶Ñ Rat√© 0 !', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: 1,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n            }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n      if (this.state.storedQuestions !== prevState.storedQuestions) {\r\n        this.setState({\r\n          question: this.state.storedQuestions[this.state.idQuestion].question,\r\n          options: this.state.storedQuestions[this.state.idQuestion].options\r\n            })\r\n      }\r\n      if (this.state.idQuestion !== prevState.idQuestion) {\r\n        this.setState({\r\n          question: this.state.storedQuestions[this.state.idQuestion].question,\r\n          options: this.state.storedQuestions[this.state.idQuestion].options,\r\n          userAnswer: null,\r\n          btnDisabled: true\r\n            })\r\n      }\r\n      if (this.props.userData.pseudo) {\r\n        this.showWelcomeMsg(this.props.userData.pseudo)\r\n      }\r\n\r\n  }\r\n\r\n  submitAnswer = selectedAnswer => {\r\n      this.setState({\r\n          userAnswer: selectedAnswer,\r\n          btnDisabled: false\r\n        })\r\n  }\r\n\r\n  gameOver = () => {\r\n    this.setState({ quizEnd: true })\r\n  }\r\n\r\n\r\n  /* qd le render s'√©x√©cute, componentDidMount s'ex√©cute */\r\n  render() {\r\n    const {pseudo} = this.props.userData;\r\n    const displayOptions = this.state.options.map((option, index) => {\r\n      return (\r\n        <p key={index}\r\n          className={`answerOptions ${this.state.userAnswer === option ? 'selected' : null}`}\r\n          onClick={() => this.submitAnswer(option)}>\r\n        {option}\r\n      </p>\r\n      )\r\n    })\r\n\r\n    /*Si le QuizEnd (niveau) est termin√©, j'affiche le message se trouvant dans le component QuizOver*/\r\n    return this.state.quizEnd ? ( <QuizOver /> ) : (\r\n      <Fragment>\r\n        <h2>Bonjour : {pseudo}, et bienvenue sur notre Quiz !</h2>\r\n        <Levels/>\r\n        <ProgressBar/>\r\n        <h3>{this.state.question}</h3>\r\n\r\n        {displayOptions}\r\n\r\n        <button\r\n          className=\"btnSubmit\"\r\n          onClick={this.nextQuestion}\r\n          type=\"button\"\r\n          disabled={this.state.btnDisabled}>\r\n          Suivant\r\n        </button>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ProgressBar\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\quizMarvel\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js",["45"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js",[],{"ruleId":"46","severity":1,"message":"47","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":16},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"46","severity":1,"message":"54","line":2,"column":9,"nodeType":"48","messageId":"49","endLine":2,"endColumn":23},{"ruleId":"46","severity":1,"message":"47","line":3,"column":8,"nodeType":"48","messageId":"49","endLine":3,"endColumn":16},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-native-reassign",["55"],"no-negated-in-lhs",["56"],"'ToastContainer' is defined but never used.","no-global-assign","no-unsafe-negation"]
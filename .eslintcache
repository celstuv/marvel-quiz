[{"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js":"1","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js":"2","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ProgressBar\\index.js":"3","C:\\wamp64\\www\\marvel-quiz\\src\\components\\quizMarvel\\index.js":"4","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js":"5","C:\\wamp64\\www\\marvel-quiz\\src\\index.js":"6","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js":"7","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js":"8","C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js":"9","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Welcome\\index.js":"10","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\context.js":"11","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\firebase.js":"12"},{"size":306,"mtime":1608228730545,"results":"13","hashOfConfig":"14"},{"size":5378,"mtime":1608302733513,"results":"15","hashOfConfig":"14"},{"size":956,"mtime":1608303855378,"results":"16","hashOfConfig":"14"},{"size":14032,"mtime":1608231124767,"results":"17","hashOfConfig":"14"},{"size":203,"mtime":1608230927304,"results":"18","hashOfConfig":"14"},{"size":790,"mtime":1608228730560,"results":"19","hashOfConfig":"14"},{"size":2483,"mtime":1608228668115,"results":"20","hashOfConfig":"14"},{"size":349,"mtime":1608117196889,"results":"21","hashOfConfig":"14"},{"size":160,"mtime":1608301040514,"results":"22","hashOfConfig":"14"},{"size":1381,"mtime":1608228732915,"results":"23","hashOfConfig":"14"},{"size":141,"mtime":1608228730537,"results":"24","hashOfConfig":"14"},{"size":1104,"mtime":1608228730538,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"1htu20f",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js",["56"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"banner-container\">\r\n      <h1><Link to=\"/\">Marvel Quiz</Link></h1>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header;\r\n",["57","58"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Quiz\\index.js",["59"],"import React, { Component, Fragment } from 'react'\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {QuizMarvel} from '../quizMarvel/';\r\nimport Levels from '../Levels';\r\nimport ProgressBar from '../ProgressBar';\r\nimport QuizOver from '../QuizOver';\r\n\r\ntoast.configure();\r\n\r\nclass Quiz extends Component {\r\n\r\n  state = {\r\n    levelNames: [\r\n      'debutant', 'confirme', 'expert'\r\n    ],\r\n    quizLevel: 0,\r\n    maxQuestions: 10,\r\n    storedQuestions: [],\r\n    question: null,\r\n    options: [],\r\n    idQuestion: 0,\r\n    btnDisabled: true,\r\n    userAnswer: null,\r\n    score: 0,\r\n    showWelcomeMsg: false,\r\n    quizEnd: false\r\n  }\r\n\r\n  storedDataRef = React.createRef();\r\n\r\n  loadQuestions = quizz => {\r\n    const fetchedArrayQuiz = QuizMarvel[0].quizz[quizz];\r\n    /* console.log(fetchedArrayQuiz); */\r\n    if (fetchedArrayQuiz.length >= this.state.maxQuestions) {\r\n      this.storedDataRef.current = fetchedArrayQuiz;\r\n\r\n      /*Ne pas faire afficher la r√©ponse (dans le cas de user\r\n      d√©v ayantl'extension react chrome, mozilla, etc)*/\r\n      const newArray = fetchedArrayQuiz.map(({\r\n        answer,\r\n        ...keepRest\r\n      }) => keepRest);\r\n      this.setState({ storedQuestions: newArray })\r\n    } else {\r\n      alert('Pas assez de questions');\r\n    }\r\n  }\r\n\r\n  //Configurer pop-up pour accueillir le joueur\r\n  showWelcomeMsg = pseudo => {\r\n    if (!this.state.showWelcomeMsg) {\r\n      this.setState({ showWelcomeMsg: true })\r\n\r\n      toast.warn(`ü¶Ñ Bonjour ${pseudo}, et bienvenue sur notre Quiz ! Et bonne Chance !`, {\r\n        position: 'top-center',\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: false,\r\n        bodyClassName: \"toastify-color-welcome\"\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  /*M√©thode de cycle de vie\r\n  il s'ex√©cute puis lance loadQuestions*/\r\n  componentDidMount() {\r\n    this.loadQuestions(this.state.levelNames[this.state.quizLevel])\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    if (this.state.idQuestion === this.state.maxQuestions - 1) {\r\n      this.gameOver();\r\n      /*console.log('GameOver');*/\r\n    } else {\r\n      this.setState(prevState => ({\r\n        idQuestion: prevState.idQuestion + 1\r\n      }))\r\n    }\r\n\r\n    //V√©rifer la r√©ponse et incr√©menter le score\r\n    const goodAnswer = this.storedDataRef.current[this.state.idQuestion].answer;\r\n    if (this.state.userAnswer === goodAnswer) {\r\n      this.setState(prevState => ({ score: prevState.score + 1 }))\r\n      toast.success('ü¶Ñ Bravo + 1!', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: 1,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n    } else {\r\n      toast.error('ü¶Ñ Rat√© 0 !', {\r\n        position: \"top-right\",\r\n        autoClose: 2000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: 1,\r\n        bodyClassName: \"toastify-color\"\r\n        });\r\n            }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n      if (this.state.storedQuestions !== prevState.storedQuestions) {\r\n        this.setState({\r\n          question: this.state.storedQuestions[this.state.idQuestion].question,\r\n          options: this.state.storedQuestions[this.state.idQuestion].options\r\n            })\r\n      }\r\n      if (this.state.idQuestion !== prevState.idQuestion) {\r\n        this.setState({\r\n          question: this.state.storedQuestions[this.state.idQuestion].question,\r\n          options: this.state.storedQuestions[this.state.idQuestion].options,\r\n          userAnswer: null,\r\n          btnDisabled: true\r\n            })\r\n      }\r\n      if (this.props.userData.pseudo) {\r\n        this.showWelcomeMsg(this.props.userData.pseudo)\r\n      }\r\n\r\n  }\r\n\r\n  submitAnswer = selectedAnswer => {\r\n      this.setState({\r\n          userAnswer: selectedAnswer,\r\n          btnDisabled: false\r\n        })\r\n  }\r\n\r\n  gameOver = () => {\r\n    this.setState({ quizEnd: true })\r\n  }\r\n\r\n\r\n  /* qd le render s'√©x√©cute, componentDidMount s'ex√©cute */\r\n  render() {\r\n    const {pseudo} = this.props.userData;\r\n    const displayOptions = this.state.options.map((option, index) => {\r\n      return (\r\n        <p key={index}\r\n          className={`answerOptions ${this.state.userAnswer === option ? 'selected' : null}`}\r\n          onClick={() => this.submitAnswer(option)}>\r\n        {option}\r\n      </p>\r\n      )\r\n    })\r\n\r\n    /*Si le QuizEnd (niveau) est termin√©, j'affiche le message se trouvant dans le component QuizOver*/\r\n    return this.state.quizEnd ? ( <QuizOver /> ) : (\r\n      <Fragment>\r\n        <h2>Bonjour : {pseudo}, et bienvenue sur notre Quiz !</h2>\r\n        <Levels/>\r\n        <ProgressBar\r\n          idQuestion={this.state.idQuestion}\r\n          maxQuestions={this.state.maxQuestions} />\r\n        <h3>{this.state.question}</h3>\r\n\r\n        {displayOptions}\r\n\r\n        <button\r\n          className=\"btnSubmit\"\r\n          onClick={this.nextQuestion}\r\n          type=\"button\"\r\n          disabled={this.state.btnDisabled} >\r\n\r\n          {this.state.idQuestion < this.state.maxQuestions - 1 ? 'Suivant' : 'Terminer'}\r\n\r\n        </button>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ProgressBar\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\quizMarvel\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Levels\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\index.js",[],["60","61"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js",["62"],"import React, { useRef, useEffect, useState, Fragment } from 'react';\r\n//useRef et useEffect useState, Fragment sont des hooks\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Landing = () => {\r\n\r\n  //Cr√©ation d'une variable d'√©tat √† false\r\n  const [btn, setBtn] = useState(false);\r\n\r\n  const refWolverine = useRef(null);\r\n  //console.log(refWolverine); pour voir si j'ai une classList\r\n\r\n  //Ajout de function useEffect pour changer l'image au chargement de la page\r\n  //useEffect s'ex√©cute 1 fois dans return au moment de l'affichage de la page\r\n  useEffect(() => {\r\n    //ajout de css pour obtenir l'image w-men.png\r\n    refWolverine.current.classList.add(\"startingImg\");\r\n    //retirer l'image au bout de 1s ainsi que les boutons inscriptions et connexions\r\n    setTimeout(() => {\r\n      refWolverine.current.classList.remove(\"startingImg\");\r\n      setBtn(true);\r\n    }, 1000);\r\n  }, [])\r\n\r\n\r\n  //Afficher les griffes qd on survol les boutons inscriptions et connexions\r\n  const setLeftImg = () => {\r\n    refWolverine.current.classList.add(\"leftImg\");\r\n    //refWolverine.current.classList.remove(\"rightImg\");\r\n  }\r\n\r\n  const setRightImg = () => {\r\n    refWolverine.current.classList.add(\"rightImg\");\r\n    //refWolverine.current.classList.remove(\"leftImg\");\r\n  }\r\n\r\n  // Autre methodes pour Effacer les griffes si on est sur l'un a=ou l'autre des boutons\r\n  const clearImg = () => {\r\n    if(refWolverine.current.classList.contains(\"leftImg\")) {\r\n      refWolverine.current.classList.remove(\"leftImg\")\r\n    } else if (refWolverine.current.classList.contains(\"rightImg\"))\r\n    refWolverine.current.classList.remove(\"rightImg\");\r\n  }\r\n\r\n\r\n  //condition de fonction si Btn est true alors affiche les boutons\r\n  const displayBtn = btn && (\r\n    //Fragment = div sans les caract√©ristiques de la div\r\n    //Link permet faire des liens. <link></Link> = <a href></a>\r\n    <Fragment>\r\n      <div className=\"leftBox\">\r\n        <Link onMouseOver={setLeftImg} onMouseOut={clearImg} className=\"btn-welcome\" to =\"/signup\">Inscription</Link>\r\n      </div>\r\n      <div className=\"rightBox\">\r\n        <Link onMouseOver={setRightImg} onMouseOut={clearImg} className=\"btn-welcome\" to =\"/login\">Connexion</Link>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n\r\n  return (\r\n    //au moment de l'affichage de la page , on a wolverine sans griffe\r\n    <main ref={refWolverine} className=\"welcomePage\">\r\n      { displayBtn }\r\n    </main>\r\n  )\r\n}\r\nexport default Landing;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js",[],["63","64"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\QuizOver\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Welcome\\index.js",["65"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\context.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\firebase.js",[],{"ruleId":"66","severity":1,"message":"67","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":16},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"66","severity":1,"message":"74","line":2,"column":9,"nodeType":"68","messageId":"69","endLine":2,"endColumn":23},{"ruleId":"70","replacedBy":"75"},{"ruleId":"72","replacedBy":"76"},{"ruleId":"66","severity":1,"message":"67","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":16},{"ruleId":"70","replacedBy":"77"},{"ruleId":"72","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":35,"column":6,"nodeType":"81","endLine":35,"endColumn":19,"suggestions":"82"},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-native-reassign",["83"],"no-negated-in-lhs",["84"],"'ToastContainer' is defined but never used.",["83"],["84"],["83"],["84"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'firebase' and 'props.history'. Either include them or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [firebase, props.history, userSession]",{"range":"88","text":"89"},[1004,1017],"[firebase, props.history, userSession]"]
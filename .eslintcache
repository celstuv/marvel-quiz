[{"C:\\wamp64\\www\\marvel-quiz\\src\\reportWebVitals.js":"1","C:\\wamp64\\www\\marvel-quiz\\src\\index.js":"2","C:\\wamp64\\www\\marvel-quiz\\src\\components\\App\\index.js":"3","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js":"4","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js":"5","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js":"6","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Login\\index.js":"7","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Welcome\\index.js":"8","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Signup\\index.js":"9","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ErrorPage\\index.js":"10","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\index.js":"11","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\context.js":"12","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\firebase.js":"13"},{"size":362,"mtime":1608022434996,"results":"14","hashOfConfig":"15"},{"size":769,"mtime":1608130049964,"results":"16","hashOfConfig":"15"},{"size":867,"mtime":1608124407754,"results":"17","hashOfConfig":"15"},{"size":227,"mtime":1608109932112,"results":"18","hashOfConfig":"15"},{"size":2483,"mtime":1608130204052,"results":"19","hashOfConfig":"15"},{"size":349,"mtime":1608117196889,"results":"20","hashOfConfig":"15"},{"size":233,"mtime":1608124449219,"results":"21","hashOfConfig":"15"},{"size":230,"mtime":1608124405585,"results":"22","hashOfConfig":"15"},{"size":3232,"mtime":1608137614660,"results":"23","hashOfConfig":"15"},{"size":530,"mtime":1608124899499,"results":"24","hashOfConfig":"15"},{"size":186,"mtime":1608129212728,"results":"25","hashOfConfig":"15"},{"size":141,"mtime":1608129384344,"results":"26","hashOfConfig":"15"},{"size":826,"mtime":1608136373427,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1htu20f",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp64\\www\\marvel-quiz\\src\\reportWebVitals.js",[],["60","61"],"C:\\wamp64\\www\\marvel-quiz\\src\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\App\\index.js",["62","63"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Header from '../Header';\r\nimport Landing from '../Landing';\r\nimport Footer from '../Footer';\r\nimport Welcome from '../Welcome';\r\nimport Login from '../Login';\r\nimport Signup from '../Signup';\r\nimport ErrorPage from '../ErrorPage';\r\nimport '../../App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Landing} /> // exact permet de prendre strictement le /\r\n        <Route path=\"/welcome\" component={Welcome} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/signup\" component={Signup} />\r\n        <Route component={ErrorPage} />\r\n      </Switch>\r\n\r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["64","65"],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Header\\index.js",["66"],"import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"banner-container\">\r\n      <h1><a href=\"/\"></a>Marvel Quiz</h1>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Landing\\index.js",["67"],"import React, { useRef, useEffect, useState, Fragment } from 'react';\r\n//useRef et useEffect useState, Fragment sont des hooks\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Landing = () => {\r\n\r\n  //Création d'une variable d'état à false\r\n  const [btn, setBtn] = useState(false);\r\n\r\n  const refWolverine = useRef(null);\r\n  //console.log(refWolverine); pour voir si j'ai une classList\r\n\r\n  //Ajout de function useEffect pour changer l'image au chargement de la page\r\n  //useEffect s'exécute 1 fois dans return au moment de l'affichage de la page\r\n  useEffect(() => {\r\n    //ajout de css pour obtenir l'image w-men.png\r\n    refWolverine.current.classList.add(\"startingImg\");\r\n    //retirer l'image au bout de 1s ainsi que les boutons inscriptions et connexions\r\n    setTimeout(() => {\r\n      refWolverine.current.classList.remove(\"startingImg\");\r\n      setBtn(true);\r\n    }, 1000);\r\n  }, [])\r\n\r\n\r\n  //Afficher les griffes qd on survol les boutons inscriptions et connexions\r\n  const setLeftImg = () => {\r\n    refWolverine.current.classList.add(\"leftImg\");\r\n    //refWolverine.current.classList.remove(\"rightImg\");\r\n  }\r\n\r\n  const setRightImg = () => {\r\n    refWolverine.current.classList.add(\"rightImg\");\r\n    //refWolverine.current.classList.remove(\"leftImg\");\r\n  }\r\n\r\n  // Autre methodes pour Effacer les griffes si on est sur l'un a=ou l'autre des boutons\r\n  const clearImg = () => {\r\n    if(refWolverine.current.classList.contains(\"leftImg\")) {\r\n      refWolverine.current.classList.remove(\"leftImg\")\r\n    } else if (refWolverine.current.classList.contains(\"rightImg\"))\r\n    refWolverine.current.classList.remove(\"rightImg\");\r\n  }\r\n\r\n\r\n  //condition de fonction si Btn est true alors affiche les boutons\r\n  const displayBtn = btn && (\r\n    //Fragment = div sans les caractéristiques de la div\r\n    //Link permet faire des liens. <link></Link> = <a href></a>\r\n    <Fragment>\r\n      <div className=\"leftBox\">\r\n        <Link onMouseOver={setLeftImg} onMouseOut={clearImg} className=\"btn-welcome\" to =\"/signup\">Inscription</Link>\r\n      </div>\r\n      <div className=\"rightBox\">\r\n        <Link onMouseOver={setRightImg} onMouseOut={clearImg} className=\"btn-welcome\" to =\"/login\">Connexion</Link>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n\r\n  return (\r\n    //au moment de l'affichage de la page , on a wolverine sans griffe\r\n    <main ref={refWolverine} className=\"welcomePage\">\r\n      { displayBtn }\r\n    </main>\r\n  )\r\n}\r\nexport default Landing;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\Footer\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Login\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Welcome\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Signup\\index.js",["68"],"import React, {useState, useContext} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Link} from 'react-router-dom';\r\nimport {FirebaseContext} from '../Firebase';\r\n\r\nconst Signup = (props) => {\r\n\r\n  //Instancier les methodes de firebases via index.js du dossier Firebase\r\n  const firebase = useContext(FirebaseContext);\r\n  //console.log(firebase);\r\n\r\n  const data = {\r\n    pseudo: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\"\r\n  }\r\n\r\nconst [loginData, setLoginData] = useState(data);\r\n//console.log(loginData);\r\nconst [error, setError] = useState('');\r\n\r\nconst handleChange = (e) => {\r\n  //Copie du initial de data equivaut à slice.\r\n  setLoginData({...loginData, [e.target.id]: e.target.value})\r\n}\r\n\r\nconst handleSubmit = (event) => {\r\n  event.preventDefault();\r\n\r\n  const {email, password} = loginData;\r\n\r\n    firebase.signupUser(email, password)\r\n      .then(user => {\r\n        //inscription ok, on vide le form\r\n        setLoginData({...data});\r\n        props.history.push('/welcome');\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n        setLoginData({...data});\r\n      })\r\n}\r\n\r\n//Destructuring\r\nconst {pseudo, email, password, confirmPassword} = loginData;\r\n\r\n//Vérification du formaulaire\r\nconst btn = pseudo === \"\" || email === \"\" ||password === \"\" || password !== confirmPassword ? <button disabled>Inscription</button> : <button>Inscription</button>\r\n\r\n//gestion des erreurs\r\nconst errorMsg = error !== '' && <span>{error.message}</span>;\r\n\r\n  return (\r\n      <div className=\"signUpLoginBox\">\r\n        <div className=\"slContainer\">\r\n          <div className=\"formBoxLeftSignup\">\r\n          </div>\r\n          <div className=\"formBoxRight\">\r\n            <div className=\"formContent\">\r\n              <h2>Inscription</h2>\r\n              {errorMsg}\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"inputBox\">\r\n                    <input onChange={handleChange} value={pseudo} type=\"text\" id=\"pseudo\" autoComplete=\"off\" required/>\r\n                    <label htmlFor=\"pseudo\">Pseudo</label>\r\n                  </div>\r\n                  <div className=\"inputBox\">\r\n                    <input onChange={handleChange} value={email} type=\"email\" id=\"email\" autoComplete=\"off\" required/>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                  </div>\r\n                  <div className=\"inputBox\">\r\n                    <input onChange={handleChange} value={password} type=\"password\" id=\"password\" autoComplete=\"off\" required/>\r\n                    <label htmlFor=\"password\">Password</label>\r\n                  </div>\r\n                  <div className=\"inputBox\">\r\n                    <input onChange={handleChange} value={confirmPassword} type=\"password\" id=\"confirmPassword\" autoComplete=\"off\" required/>\r\n                    <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                  </div>\r\n                  {btn}\r\n                </form>\r\n                <div className=\"linkContainer\">\r\n                  <Link className=\"simpleLink\" to=\"/login\">Déja inscrit? Connectez-vous</Link>\r\n                </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\nexport default Signup;\r\n","C:\\wamp64\\www\\marvel-quiz\\src\\components\\ErrorPage\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\index.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\context.js",[],"C:\\wamp64\\www\\marvel-quiz\\src\\components\\Firebase\\firebase.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":16},{"ruleId":"77","severity":1,"message":"78","line":19,"column":53,"nodeType":"79","endLine":20,"endColumn":9},{"ruleId":"69","replacedBy":"80"},{"ruleId":"71","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":7,"column":11,"nodeType":"84","endLine":7,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":16},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal",["85"],["86"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]